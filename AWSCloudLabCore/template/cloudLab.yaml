---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS Cloud Lab Class
Parameters:
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m1.small
  EndLabAMILambdaArn:
    Description: End Lab AMI Lambda ARN
    Type: String
  EndLabAMI:
    Description: End Lab AMI Lambda ARN
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
  SmtpPassword:
    NoEcho: 'true'
    Description: Smtp Password
    Type: String
Conditions:
  EndLabAmiResources:
    Fn::Equals:
    - Ref: EndLabAMI
    - 'true'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
  InboundResponsePortsNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0

  OutBoundRDPNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  SubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      NetworkAclId:
        Ref: NetworkAcl
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: Enable SSH and RDP access via port 22 and 3389
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0
  deployLambdaWithParams:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3-<%-labContext.configure.labRegion%>.amazonaws.com/<%-labContext.configure.cloudformationS3Bucket%>/deployLambda.yaml
      Parameters:
        LambdaBucket: "<%-labContext.configure.cloudformationS3Bucket%>"
        LambdaBucketKey: "<%-lab%>DeleteStackLambda.zip"
        Lab: "<%-lab%>"
        StackId:
          Ref: AWS::StackId
        LabHash: "<%-labHash%>"
        CronExpression: "<%-endLabCronExpression%>"
        KeyPairsBucket: "<%-labContext.configure.keypairS3Bucket%>"
  StudentEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: StudentInstance
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:DescribeAssociation
            - ssm:GetDeployablePatchSnapshotForInstance
            - ssm:GetDocument
            - ssm:GetManifest
            - ssm:GetParameters
            - ssm:ListAssociations
            - ssm:ListInstanceAssociations
            - ssm:PutInventory
            - ssm:PutComplianceItems
            - ssm:PutConfigurePackageResult
            - ssm:UpdateAssociationStatus
            - ssm:UpdateInstanceAssociationStatus
            - ssm:UpdateInstanceInformation
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2messages:AcknowledgeMessage
            - ec2messages:DeleteMessage
            - ec2messages:FailMessage
            - ec2messages:GetEndpoint
            - ec2messages:GetMessages
            - ec2messages:SendReply
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:DescribeInstanceStatus
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: "*"
  StudentEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: StudentEC2Role
  TeacherEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: TeacherInstance
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:DescribeAssociation
            - ssm:GetDeployablePatchSnapshotForInstance
            - ssm:GetDocument
            - ssm:GetManifest
            - ssm:GetParameters
            - ssm:ListAssociations
            - ssm:ListInstanceAssociations
            - ssm:PutInventory
            - ssm:PutComplianceItems
            - ssm:PutConfigurePackageResult
            - ssm:UpdateAssociationStatus
            - ssm:UpdateInstanceAssociationStatus
            - ssm:UpdateInstanceInformation
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2messages:AcknowledgeMessage
            - ec2messages:DeleteMessage
            - ec2messages:FailMessage
            - ec2messages:GetEndpoint
            - ec2messages:GetMessages
            - ec2messages:SendReply
            Resource: "*"
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
            - ec2:DescribeInstanceStatus
            Resource: "*"
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: "*"
  TeacherEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: TeacherEC2Role

#Run Command
  EnableOfflineDiskDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: 'Enable-OfflineDisk : Find and enable offline disks on Windows.'
        mainSteps:
        - action: aws:runPowerShellScript
          name: EnableOfflineDisk
          precondition:
            StringEquals:
            - platformType
            - Windows
          inputs:
            runCommand:
            - Function Enable-OfflineDisk
            - "{"
            - ''
            - "    #Check for offline disks on server."
            - '    $offlinedisk = "list disk" | diskpart | where {$_ -match "offline"}'
            - "    "
            - "    #If offline disk(s) exist"
            - "    if($offlinedisk)"
            - "    {"
            - "    "
            - '        Write-Output "Following Offline disk(s) found..Trying to bring Online."'
            - "        $offlinedisk"
            - "        "
            - "        #for all offline disk(s) found on the server"
            - "        foreach($offdisk in $offlinedisk)"
            - "        {"
            - "    "
            - "            $offdiskS = $offdisk.Substring(2,6)"
            - '            Write-Output "Enabling $offdiskS"'
            - "#Creating command parameters for selecting disk, making disk online and setting
              off the read-only flag."
            - $OnlineDisk = @"
            - select $offdiskS
            - attributes disk clear readonly
            - online disk
            - attributes disk clear readonly
            - "\"@"
            - "            #Sending parameters to diskpart"
            - "            $noOut = $OnlineDisk | diskpart"
            - "            sleep 5"
            - "    "
            - "       }"
            - ''
            - "        #If selfhealing failed throw the alert."
            - '        if(($offlinedisk = "list disk" | diskpart | where {$_ -match "offline"}
              ))'
            - "        {"
            - "        "
            - '            Write-Output "Failed to bring the following disk(s) online"'
            - "            $offlinedisk"
            - ''
            - "        }"
            - "        else"
            - "        {"
            - "    "
            - '            Write-Output "Disk(s) are now online."'
            - ''
            - "        }"
            - ''
            - "    }"
            - ''
            - "    #If no offline disk(s) exist."
            - "    else"
            - "    {"
            - ''
            - "        #All disk(s) are online."
            - '        Write-Host "All disk(s) are online!"'
            - ''
            - "    }"
            - "}"
            - Enable-OfflineDisk

#<%- include('cloudLabInner.yaml')%>
Outputs:
  LabGroupName:
    Description: Lab Group Name
    Value:
      Fn::GetAtt:
      - CFNUserGroup
      - Arn
